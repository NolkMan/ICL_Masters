@inproceedings{weichselbaum2016csp,
  title={Csp is dead, long live csp! on the insecurity of whitelists and the future of content security policy},
  author={Weichselbaum, Lukas and Spagnuolo, Michele and Lekies, Sebastian and Janc, Artur},
  booktitle={Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages={1376--1387},
  year={2016}
}
@article{osti_10173479,
  place = {Country unknown/Code not available}, 
  title = {Complex Security Policy? A Longitudinal Analysis of Deployed Content Security Policies}, 
  url = {https://par.nsf.gov/biblio/10173479}, 
  DOI = {10.14722/ndss.2020.23046},
  abstractNote = {},
  journal = {Proceedings of the 27th Network and Distributed System Security Symposium (NDSS)},
  author = {Roth,
	Sebastian and Barron,
	Timothy and Calzavara,
	Stefano and Nikiforakis,
	Nick and Stock,
	Ben},
}
@inproceedings{10.1145/2976749.2978384,
  author = {Pan, Xiang and Cao, Yinzhi and Liu, Shuangping and Zhou, Yu and Chen, Yan and Zhou, Tingzhe},
  title = {CSPAutoGen: Black-Box Enforcement of Content Security Policy upon Real-World Websites},
  year = {2016},
  isbn = {9781450341394},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2976749.2978384},
  doi = {10.1145/2976749.2978384},
  abstract = {Content security policy (CSP) which has been standardized by W3C and adopted by all major commercial browsers-is one of the most promising approaches for defending against cross-site scripting (XSS) attacks. Although client-side adoption of CSP is successful, server-side adoption is far behind the client side: according to a large-scale survey, less than 0.002% of Alexa Top 1M websites enabled CSP. To facilitate the adoption of CSP, we propose CSPAutoGen to enable CSP in real-time, without server modifications, and being compatible with real-world websites. Specifically, CSPAutoGen trains so-called templates for each domain, generates CSPs based on the templates, rewrites incoming webpages on the fly to apply those generated CSPs, and then serves those rewritten webpages to client browsers. CSPAutoGen is designed to automatically enforce the most secure and strict version of CSP without enabling "unsafe-inline" and "unsafe-eval", i.e., CSPAutoGen can handle all the inline and dynamic scripts.We have implemented a prototype of CSPAutoGen, and our evaluation shows that CSPAutoGen can correctly render all the Alexa Top 50 websites. Moreover, we conduct extensive case studies on five popular websites, indicating that CSPAutoGen can preserve the behind-the-login functionalities, such as sending emails and posting comments. Our security analysis shows that CSPAutoGen is able to defend against all the tested real-world XSS attacks.},
  booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages = {653â€“665},
  numpages = {13},
  keywords = {content security policy, web security, cross-site scripting, javascript},
  location = {Vienna, Austria},
  series = {CCS '16}
}
